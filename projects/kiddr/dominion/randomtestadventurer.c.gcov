        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Riam Sangdoung
        -:    2: * Adventurer card - randomtestadventurer.c
        -:    3: */
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <string.h>
        -:   11:#include <time.h>
        -:   12:#include <assert.h>
        -:   13:
function main called 1 returned 100% blocks executed 86%
        1:   14:int main () {
        -:   15:
        -:   16:   struct gameState g;
        -:   17:
        1:   18:   int seed = 1000;
        1:   19:   int numTestsPassed = 0, passedAllTestsFlag = 0, testDraw = 0, failedDiscard = 0;
        1:   20:   int numPlayers = 2, currPlayer = 0, deckSize, handSize, randCard, randAllowedCard;
        -:   21:   int trCopper, trSilver, trGold;
        1:   22:   int beforeCoins = 0, afterCoins = 0;
        -:   23:   int i, j, k;
        1:   24:   int choice1 = 0, choice2 = 0, choice3 = 0, handPos = 0, bonus = 0;
        1:   25:   int allowedCards[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   26:
        1:   27:   srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   28:
        -:   29:
   123457:   30:   for (i = 0; i < 123456; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   31:
        -:   32:// Randomly intialized the "sane" game state
   123456:   33:      initializeGame(numPlayers, allowedCards, seed, &g);
call    0 returned 100%
   123456:   34:      beforeCoins = 0;
   123456:   35:      afterCoins = 0;
        -:   36:
   123456:   37:      deckSize = rand() % (MAX_DECK + 1);
call    0 returned 100%
   123456:   38:      handSize = rand() % (deckSize + 1);
call    0 returned 100%
        -:   39:
   123456:   40:      g.deckCount[0] = deckSize - handSize;
   123456:   41:      g.handCount[0] = handSize;
        -:   42:
        -:   43:// Fills each player's deck with random cards
   370368:   44:      for (j = 0; j < numPlayers; j++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   45:
 16873803:   46:	 for (k = 0; k < g.deckCount[j]; k++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   47:
 16626891:   48:	    randCard = rand() % 51;	// This is the # of different cards possible + 1
call    0 returned 100%
        -:   49:
 16626891:   50:	    if (randCard == 1) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   326093:   51:	       g.deck[j][k] = copper;
        -:   52:	    }
 16300798:   53:	    else if (randCard == 2) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   326719:   54:	       g.deck[j][k] = silver;
        -:   55:	    }
 15974079:   56:	    else if (randCard == 3) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   324808:   57:	       g.deck[j][k] = gold;
        -:   58:	    }
        -:   59:	    else {
 15649271:   60:	       randAllowedCard = rand() % 10;
call    0 returned 100%
 15649271:   61:	       g.deck[j][k] = allowedCards[randAllowedCard];
        -:   62:	    }
        -:   63:
        -:   64:	 }
        -:   65:
        -:   66:      }
        -:   67:
        -:   68:// Current state of the player's treasure
 15557919:   69:      for (j = 0; j < g.handCount[currPlayer]; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 15434463:   70:	 if (g.hand[currPlayer][j] == copper || g.hand[currPlayer][j] == silver || g.hand[currPlayer][j] == gold) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
branch  4 taken 72% (fallthrough)
branch  5 taken 28%
 13714453:   71:	    beforeCoins += 1;
        -:   72:	 }
        -:   73:      }
        -:   74:
        -:   75:// Play card
   123456:   76:      cardEffect(adventurer, choice1, choice2, choice3, &g, handPos, &bonus);
call    0 returned 100%
        -:   77:
        -:   78:// State of the current player's treasure hand
 15755808:   79:      for (j = 0; j < g.handCount[currPlayer]; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 15632352:   80:	 if (g.hand[currPlayer][j] == copper || g.hand[currPlayer][j] == silver || g.hand[currPlayer][j] == gold) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
branch  4 taken 72% (fallthrough)
branch  5 taken 28%
 13915499:   81:	    afterCoins += 1;
        -:   82:	 }
        -:   83:      }
        -:   84:
   123456:   85:      trCopper = 0;
   123456:   86:      trSilver = 0;
   123456:   87:      trGold = 0;
        -:   88:
        -:   89:// Discard pile state
  3360767:   90:      for (j = 0; j < g.discardCount[currPlayer]; j++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   91:
  3237311:   92:	 if (g.discard[currPlayer][j] == copper) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:	    trCopper += 1;
        -:   94:	 }
  3237311:   95:	 else if (g.discard[currPlayer][j] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   96:	    trSilver += 1;
        -:   97:	 }
  3237311:   98:	 else if (g.discard[currPlayer][j] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   99:	    trGold += 1;
        -:  100:	 }
        -:  101:
        -:  102:      }
        -:  103:
        -:  104:// Pass or Fail determination tests
   123456:  105:      passedAllTestsFlag = 1;
        -:  106:
   123456:  107:      printf("Testing Adventurer card...\n");
call    0 returned 100%
        -:  108:
   123456:  109:      if (afterCoins != (beforeCoins + 2)) {
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
    29097:  110:	 printf("\tCards drawn - FAIL\n");
call    0 returned 100%
    29097:  111:	 testDraw++;
    29097:  112:	 passedAllTestsFlag = 0;
        -:  113:      }
        -:  114:      else {
    94359:  115:	 printf("\tCards drawn - PASS\n");
call    0 returned 100%
        -:  116:      }
        -:  117:
   123456:  118:      if (afterCoins < beforeCoins) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  119:	 printf("\tCards count - FAIL\n");
call    0 never executed
    #####:  120:	 testDraw++;
    #####:  121:	 passedAllTestsFlag = 0;
        -:  122:      }
        -:  123:      else {
   123456:  124:	 printf("\tCards count - PASS\n");
call    0 returned 100%
        -:  125:      }
        -:  126:
        -:  127:
   123456:  128:      if (trGold != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  129:	 printf("\tGold - FAIL\n");
call    0 never executed
    #####:  130:	 failedDiscard++;
    #####:  131:	 passedAllTestsFlag = 0;
        -:  132:      }
        -:  133:      else {
   123456:  134:	 printf("\tGold - PASS\n");
call    0 returned 100%
        -:  135:      }
        -:  136:
   123456:  137:      if (trSilver != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  138:	 printf("\tSilver - FAIL\n");
call    0 never executed
    #####:  139:	 failedDiscard++;
    #####:  140:	 passedAllTestsFlag = 0;
        -:  141:      }
        -:  142:      else {
   123456:  143:	 printf("\tSilver - PASS\n");
call    0 returned 100%
        -:  144:      }
        -:  145:
   123456:  146:      if (trCopper != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  147:	 printf("\tCopper - FAIL\n");
call    0 never executed
    #####:  148:	 failedDiscard++;
    #####:  149:	 passedAllTestsFlag = 0;
        -:  150:      }
        -:  151:      else {
   123456:  152:	 printf("\tCopper - PASS\n");
call    0 returned 100%
        -:  153:      }
        -:  154:
        -:  155:
   123456:  156:      if (passedAllTestsFlag == 1) {
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
    94359:  157:	 printf("All tests passed!!\n\n");
call    0 returned 100%
    94359:  158:	 numTestsPassed++;
        -:  159:      }
        -:  160:
        -:  161:   }
        -:  162:
        1:  163:   printf("Adventurer tests summary:\n");
call    0 returned 100%
        1:  164:   printf("\tPASSED: %d\n", numTestsPassed);
call    0 returned 100%
        1:  165:   printf("\tFAILED (draw): %d\n", testDraw);
call    0 returned 100%
        1:  166:   printf("\tFAILED (discard): %d\n\n", failedDiscard);
call    0 returned 100%
        -:  167:
        1:  168:   return 0;
        -:  169:
        -:  170:}
