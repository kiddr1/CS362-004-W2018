        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Riam Sangdoung
        -:    2: * randomtestcard1.c
        -:    3: * Smithy Card - random test generator
        -:    4: */
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:#include <assert.h>
        -:   14:
        -:   15:
function main called 1 returned 100% blocks executed 94%
        1:   16:int main () {
        -:   17:
        -:   18:   struct gameState g;
        -:   19:
        1:   20:   int seed = 1000;
        1:   21:   int numTestsPassed = 0, passedAllTestsFlag = 0;
        1:   22:   int numPlayers = 2, currPlayer = 0;
        -:   23:   int deckSize, handSize, startDeck, currDeck, startHand, currHand, startDiscard, currDiscard;
        1:   24:   int failedDeckCount = 0, failedHandCount = 0, failedDiscardCount = 0;
        1:   25:   int i = 0;
        1:   26:   int choice1 = 0, choice2 = 0, choice3 = 0, handPos = 0, bonus = 0;
        -:   27:
        1:   28:   int allowedCards[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   29:
        1:   30:   srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   31:
   123457:   32:   for (i = 0; i < 123456; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   33:
        -:   34:// Randomly intialized the "sane" game state
   123456:   35:      initializeGame(numPlayers, allowedCards, seed, &g);
call    0 returned 100%
        -:   36:
   123456:   37:      deckSize = rand() % (MAX_DECK + 1);
call    0 returned 100%
   123456:   38:      handSize = rand() % (deckSize + 1);
call    0 returned 100%
        -:   39:
   123456:   40:      g.deckCount[0] = deckSize - handSize;
   123456:   41:      g.handCount[0] = handSize;
   123456:   42:      handPos = g.hand[currPlayer][g.handCount[currPlayer]-1];
        -:   43:
        -:   44:// Current state before playing card
   123456:   45:      startDeck = g.deckCount[0];
   123456:   46:      startHand = g.handCount[0];
   123456:   47:      startDiscard = g.playedCardCount;
        -:   48:
        -:   49:// Play card
   123456:   50:      cardEffect(smithy, choice1, choice2, choice3, &g, handPos, &bonus);
call    0 returned 100%
        -:   51:
        -:   52:
        -:   53:// State after playing the card
   123456:   54:      currDeck = g.deckCount[0];
   123456:   55:      currHand = g.handCount[0];
   123456:   56:      currDiscard = g.playedCardCount;
        -:   57:
        -:   58:
        -:   59:// Pass or Fail determination tests
   123456:   60:      passedAllTestsFlag = 1;
        -:   61:
   123456:   62:      printf("Testing Smithy card...\n");
call    0 returned 100%
        -:   63:
   123456:   64:      if (currDeck != (startDeck - 3)) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     4417:   65:	 printf("\tDeck count - FAIL\n");
call    0 returned 100%
     4417:   66:	 failedDeckCount++;
     4417:   67:	 passedAllTestsFlag = 0;
        -:   68:      }
        -:   69:      else {
   119039:   70:	 printf("\tDeck count - PASS\n");
call    0 returned 100%
        -:   71:      }
        -:   72:
   123456:   73:      if (currHand != (startHand + 2)) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
     4417:   74:	 printf("\tCards drawn - FAIL\n");
call    0 returned 100%
     4417:   75:	 failedHandCount++;
     4417:   76:	 passedAllTestsFlag = 0;
        -:   77:      }
        -:   78:      else {
   119039:   79:	 printf("\tCards drawn - PASS\n");
call    0 returned 100%
        -:   80:      }
        -:   81:
   123456:   82:      if (currDiscard != (startDiscard + 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   83:	 printf("\tCards discarded - FAIL\n");
call    0 never executed
    #####:   84:	 failedDiscardCount++;
    #####:   85:	 passedAllTestsFlag = 0;
        -:   86:      }
        -:   87:      else {
   123456:   88:	 printf("\tCards discarded - PASS\n");
call    0 returned 100%
        -:   89:      }
        -:   90:
        -:   91:
   123456:   92:      if (passedAllTestsFlag == 1) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
   119039:   93:	 printf("All tests passed!!\n");
call    0 returned 100%
   119039:   94:	 numTestsPassed++;
        -:   95:      }
        -:   96:
        -:   97:   }
        -:   98:
        1:   99:   printf("Smithy tests summary:\n");
call    0 returned 100%
        1:  100:   printf("\tPASSED: %d\n", numTestsPassed);
call    0 returned 100%
        1:  101:   printf("\tFAILED (deck): %d\n", failedDeckCount);
call    0 returned 100%
        1:  102:   printf("\tFAILED (hand): %d\n", failedHandCount);
call    0 returned 100%
        1:  103:   printf("\tFAILED (discard): %d\n\n", failedDiscardCount);
call    0 returned 100%
        -:  104:
        1:  105:   return 0;
        -:  106:
        -:  107:}
